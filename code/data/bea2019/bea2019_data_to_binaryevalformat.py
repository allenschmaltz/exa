# -*- coding: utf-8 -*-
"""
This version is used with the BEA2019 (https://www.cl.cam.ac.uk/research/nl/bea2019st/) dataset.

Convert the W&I+LOCNESS (Bryant et al., 2019; Granger, 1998)
 (available at https://www.cl.cam.ac.uk/research/nl/bea2019st/data/wi+locness_v2.1.bea19.tar.gz)
 to the binary prediction data format:

0 :: correct sentence
1 :: incorrect sentence

The input sentences are filtered with the BERT tokenizer to eliminate tokens that are elided by the tokenizer to
avoid downstream mis-matches with label alignments.

We split off 10% of the train to use as the dev set as in 'Zero-shot Sequence Labeling for
Transformer-based Sentence Classifiers (https://arxiv.org/abs/2103.14465v2)'. The file ABCN.dev.gold.bea19.m2
then becomes the 'test' set for final held-out evaluation.

"""

import sys
import argparse

import string
import codecs

from os import path
import random
from collections import defaultdict
import operator

import numpy as np

from pytorch_pretrained_bert.tokenization import BertTokenizer

random.seed(1776)

# the following are from https://github.com/bujol12/bert-seq-interpretability/blob/master/dev_indices_train_ABC.txt
# and are the "indices of train BEA2019 ABC used as dev dataset"
dev_indices_train_ABC = [23, 69, 79, 83, 111, 112, 116, 137, 158, 159, 162, 167, 177, 181, 186, 198, 220, 228, 231, 233, 235, 239, 240, 247, 249, 254, 255, 260, 268, 270, 300, 308, 315, 366, 374, 395, 404, 408, 426, 439, 447, 473, 474, 484, 485, 491, 497, 505, 517, 519, 520, 531, 538, 543, 544, 549, 550, 555, 572, 579, 584, 601, 603, 604, 646, 654, 657, 658, 662, 673, 683, 701, 703, 716, 723, 746, 765, 788, 790, 791, 800, 843, 851, 852, 877, 896, 901, 917, 938, 942, 950, 955, 972, 979, 993, 994, 996, 1000, 1042, 1044, 1052, 1054, 1056, 1066, 1080, 1087, 1091, 1098, 1120, 1142, 1146, 1147, 1186, 1189, 1196, 1197, 1198, 1200, 1204, 1210, 1220, 1236, 1245, 1258, 1266, 1269, 1272, 1276, 1285, 1288, 1294, 1298, 1304, 1320, 1321, 1324, 1334, 1350, 1414, 1430, 1431, 1432, 1440, 1447, 1451, 1453, 1466, 1468, 1471, 1474, 1487, 1489, 1497, 1507, 1528, 1539, 1559, 1574, 1576, 1578, 1594, 1603, 1609, 1617, 1632, 1638, 1643, 1647, 1657, 1679, 1683, 1691, 1714, 1718, 1719, 1737, 1745, 1755, 1756, 1765, 1775, 1780, 1789, 1807, 1808, 1810, 1811, 1813, 1831, 1832, 1838, 1852, 1855, 1860, 1863, 1883, 1908, 1916, 1923, 1931, 1941, 1942, 1949, 1971, 1975, 1977, 1978, 1987, 1989, 2001, 2007, 2017, 2018, 2020, 2036, 2037, 2045, 2062, 2104, 2134, 2140, 2141, 2147, 2153, 2155, 2164, 2181, 2182, 2188, 2212, 2215, 2225, 2237, 2240, 2265, 2285, 2289, 2305, 2328, 2339, 2352, 2357, 2374, 2379, 2388, 2397, 2423, 2429, 2502, 2507, 2510, 2514, 2534, 2540, 2547, 2549, 2550, 2563, 2570, 2581, 2584, 2591, 2595, 2599, 2607, 2617, 2630, 2633, 2635, 2642, 2646, 2652, 2656, 2662, 2672, 2677, 2682, 2684, 2695, 2716, 2721, 2722, 2730, 2752, 2762, 2772, 595, 2800, 2812, 2822, 2828, 2838, 2844, 2850, 2854, 2881, 2884, 2887, 2898, 2928, 2936, 2938, 2943, 2953, 2958, 2963, 2991, 2993, 3012, 3023, 3024, 3027, 3040, 3044, 3048, 3055, 3080, 3083, 3086, 3087, 3088, 3099, 3122, 3131, 3142, 3153, 3159, 3174, 3193, 3194, 3207, 3215, 3220, 1293, 3254, 3262, 3272, 3274, 3280, 3286, 3293, 3296, 3312, 3323, 1039, 3337, 3364, 3374, 3375, 3394, 3401, 3412, 3425, 3432, 3440, 3443, 3448, 3469, 3476, 3480, 3482, 3485, 3498, 3499, 3530, 3536, 3538, 3541, 3543, 3565, 3568, 3575, 3592, 3593, 3594, 3603, 3609, 3612, 3647, 3654, 3657, 3666, 3682, 3693, 3695, 3701, 3703, 3704, 3715, 3720, 3741, 3743, 985, 3761, 3768, 3771, 3776, 3785, 356, 3834, 3846, 3854, 3862, 3874, 3881, 3899, 3902, 3930, 3936, 3953, 3961, 3964, 3969, 3977, 3982, 3988, 4001, 4013, 4018, 4027, 4037, 4045, 4054, 4072, 4075, 4084, 4086, 4110, 4138, 4146, 4148, 4169, 4186, 4258, 4265, 4289, 4291, 4297, 4298, 4300, 4305, 4320, 4328, 4344, 4355, 4357, 4358, 4362, 4369, 4376, 4378, 4391, 4399, 4405, 4409, 4410, 4412, 4413, 4416, 4431, 4434, 4448, 4450, 4480, 4488, 4514, 4515, 4518, 4530, 4540, 4579, 4603, 4604, 4605, 4609, 4616, 4618, 4620, 4624, 4628, 4629, 4661, 4665, 4685, 4691, 4709, 4714, 4725, 4732, 4737, 4741, 4749, 4753, 4762, 4768, 4789, 4807, 4817, 4836, 4843, 4856, 4861, 4871, 4881, 4889, 4890, 4892, 4896, 4897, 4898, 4907, 4918, 4935, 4945, 4966, 4971, 4977, 4979, 4983, 4991, 4992, 5012, 5035, 5084, 5109, 5110, 5117, 5137, 5138, 5153, 5158, 5166, 5167, 5176, 5189, 5191, 5193, 5213, 5214, 5226, 5243, 5260, 5276, 5277, 5278, 5280, 5310, 5311, 5324, 5333, 5342, 428, 5354, 5377, 5384, 5389, 5461, 5471, 5477, 5483, 5489, 5490, 5509, 5513, 5533, 5573, 5587, 5593, 5600, 5606, 5611, 66, 5626, 5633, 5644, 5646, 5657, 5667, 5682, 5689, 5690, 5709, 5736, 5741, 5746, 5765, 5776, 5781, 5788, 5794, 5802, 5812, 5815, 5821, 5823, 5825, 5839, 5845, 5859, 5862, 5868, 3137, 5882, 5885, 5886, 5890, 5893, 5920, 5931, 5961, 5969, 5972, 5975, 5979, 5989, 5997, 6003, 6012, 6015, 6031, 6034, 6044, 6050, 6053, 6057, 6079, 6085, 6091, 6095, 6101, 6103, 6108, 6126, 6139, 6148, 6156, 6171, 6187, 6192, 6208, 6226, 6271, 6275, 6286, 6294, 6311, 6320, 6324, 6346, 584, 6356, 6358, 6364, 6369, 6390, 6397, 6398, 6415, 6428, 6434, 6448, 6468, 6487, 6492, 6516, 6523, 6555, 6562, 6570, 6577, 6582, 6586, 6596, 6597, 6599, 6602, 6609, 6620, 6624, 6634, 6643, 6646, 6648, 6654, 6669, 6670, 6679, 6680, 6710, 6719, 6726, 6746, 6780, 6785, 6795, 6820, 6830, 6838, 6844, 6848, 6860, 6864, 6868, 6869, 6871, 6886, 6893, 6906, 6914, 6916, 6943, 6964, 6977, 6980, 6981, 6989, 7009, 7017, 7018, 7019, 7020, 7033, 7035, 7051, 7062, 7085, 7111, 7129, 7134, 7135, 7139, 7145, 7147, 7151, 7154, 7160, 7164, 7171, 207, 7190, 7220, 7242, 7244, 7250, 7254, 7257, 7268, 7270, 7271, 7289, 7297, 7311, 7314, 7322, 7342, 7349, 7350, 7361, 7362, 7370, 7376, 7377, 7386, 7416, 7418, 7419, 7428, 7430, 7436, 7438, 7445, 7458, 7482, 7488, 7490, 7503, 7504, 7515, 7517, 7532, 7542, 111, 7595, 3916, 7598, 7604, 7622, 7629, 7644, 7649, 7653, 7660, 7661, 7663, 7666, 7679, 7680, 7719, 7721, 7737, 7752, 7763, 7776, 7801, 7808, 7809, 7831, 7836, 7864, 7876, 7879, 7881, 7902, 7916, 7926, 7943, 7968, 7982, 7993, 7998, 8000, 8002, 8005, 8040, 8043, 8055, 8059, 8068, 8074, 8092, 8109, 8123, 8125, 8141, 8142, 8160, 8162, 8172, 8174, 8187, 8213, 8214, 8225, 8247, 8258, 8279, 8299, 8301, 8309, 8313, 8315, 8338, 8352, 8363, 8385, 8387, 8388, 8402, 8417, 8437, 8439, 8457, 8460, 8461, 8476, 8485, 8494, 8506, 8528, 8541, 8547, 8550, 8555, 8563, 8571, 8577, 8580, 8583, 8585, 8588, 8590, 8597, 8615, 8628, 8629, 8630, 8633, 8638, 8644, 8648, 8678, 8710, 8713, 8718, 8727, 8732, 8738, 8744, 8778, 8794, 8809, 8810, 8821, 8835, 8837, 8858, 8860, 8868, 430, 8872, 8896, 8905, 8907, 8932, 8938, 8939, 8950, 8962, 8963, 8964, 8969, 8973, 8980, 8984, 8992, 8998, 9015, 9024, 9030, 9033, 9038, 9050, 9060, 9084, 9087, 9092, 9093, 9096, 9099, 9104, 9112, 9115, 9140, 9158, 9175, 9176, 9190, 9195, 9197, 9210, 9212, 9231, 9243, 9248, 9249, 9276, 9286, 9303, 9312, 9318, 9320, 9322, 9324, 9326, 9336, 9345, 9347, 9349, 9362, 9367, 9371, 9377, 9379, 9381, 9383, 9402, 9436, 9455, 9461, 9486, 9497, 9501, 9503, 9512, 9520, 9532, 9548, 9565, 9566, 9568, 9570, 9572, 9577, 9573, 9598, 9605, 9608, 9626, 9631, 9633, 9634, 9655, 9670, 9673, 9680, 9698, 9702, 9711, 9720, 9759, 9771, 9774, 9784, 9791, 9800, 9808, 9819, 9827, 9836, 9860, 9880, 9891, 9893, 9896, 9904, 9907, 9914, 9921, 9923, 9928, 9937, 9939, 9954, 9960, 9964, 9977, 9978, 9989, 10011, 10012, 10017, 10055, 10090, 10097, 10109, 10113, 10142, 10149, 10183, 10193, 10205, 10207, 985, 10221, 10239, 10250, 10270, 10278, 10312, 10321, 10333, 10352, 10354, 10380, 10387, 10389, 10422, 10428, 10445, 10448, 10452, 10454, 10462, 10466, 10477, 10489, 10535, 10545, 10547, 10559, 10580, 10582, 10619, 10637, 10638, 10654, 10672, 10690, 10694, 10707, 10729, 10733, 8454, 10738, 10758, 10760, 10763, 10774, 10783, 10786, 10801, 10807, 10823, 10840, 10867, 10873, 10876, 10882, 10884, 10895, 10902, 10904, 10639, 10922, 10941, 10942, 10960, 10963, 10964, 10967, 10968, 11001, 11018, 11021, 11022, 11027, 11030, 11034, 11056, 11075, 11086, 11094, 11099, 11119, 11121, 11122, 11129, 11131, 11138, 11159, 11161, 11164, 11169, 11171, 11188, 11192, 11227, 11229, 11244, 11245, 11249, 11253, 11258, 11259, 11267, 11280, 11281, 11291, 11293, 11306, 11310, 11321, 11336, 11350, 11354, 11372, 11375, 11379, 11385, 11386, 11392, 11399, 11413, 11430, 11458, 11462, 11473, 11478, 11525, 11526, 11530, 11540, 11543, 11579, 11593, 11609, 11611, 11619, 11624, 11626, 11629, 11640, 11655, 11656, 11658, 11667, 11675, 11691, 11692, 11694, 11711, 11734, 11754, 11759, 11777, 11803, 11786, 11814, 11838, 11862, 11865, 11888, 11915, 11918, 11922, 11939, 11947, 11982, 12001, 12005, 12023, 12024, 12041, 12042, 12063, 12066, 12087, 12092, 12094, 12098, 12101, 12105, 12110, 12123, 12129, 12146, 12149, 12158, 12161, 12167, 12179, 12183, 12199, 12207, 12218, 12219, 12224, 12228, 12231, 12235, 12236, 12245, 12251, 12252, 12264, 12273, 12280, 12281, 12284, 12296, 12334, 12366, 12370, 12371, 12383, 12390, 12392, 12404, 12408, 12413, 12425, 12428, 12438, 12494, 12506, 12523, 12526, 12539, 12563, 12578, 12579, 12585, 12591, 12592, 12602, 12604, 12610, 12616, 12621, 12623, 12629, 12632, 12639, 12658, 12668, 12694, 12696, 12705, 12706, 12715, 12721, 12724, 12732, 12739, 12742, 12750, 12767, 12806, 12843, 12845, 12851, 12868, 12870, 12888, 12892, 12893, 12898, 12904, 12941, 12948, 12951, 12965, 12974, 12979, 12986, 13002, 13007, 13041, 13043, 13059, 13079, 13091, 13099, 13103, 13115, 13116, 13117, 13134, 13152, 13167, 13174, 13180, 13185, 13190, 13191, 13193, 13201, 13215, 13221, 13247, 13252, 13253, 13258, 13262, 13264, 207, 13267, 13268, 13271, 13275, 13277, 13278, 13280, 13284, 13285, 13290, 13291, 13301, 13306, 13308, 13321, 13324, 13329, 13361, 13362, 13365, 13418, 13424, 13429, 13450, 13497, 13523, 851, 13547, 13549, 8804, 13571, 13574, 13584, 13595, 13600, 13608, 13629, 13635, 13645, 13659, 13674, 13680, 13682, 13684, 13699, 13704, 13714, 13728, 13747, 13749, 3761, 13756, 13792, 13795, 13804, 13809, 13818, 13825, 13826, 13828, 13837, 13842, 12519, 13865, 13880, 13885, 13898, 13921, 13947, 13953, 13965, 13977, 13978, 13980, 13997, 14017, 14021, 14023, 14025, 14033, 14034, 14048, 14054, 14057, 14060, 14062, 14071, 14075, 14086, 14093, 14095, 14101, 14106, 14126, 14140, 14144, 14151, 14154, 14187, 14193, 14194, 14202, 14203, 14210, 14216, 14244, 14257, 14266, 14267, 14272, 14279, 14282, 14283, 14287, 14336, 14337, 14342, 14351, 14372, 14381, 14383, 14396, 14408, 14409, 14416, 14417, 4177, 14425, 14434, 14464, 14475, 14476, 14492, 14508, 14514, 14576, 14582, 14596, 14611, 14632, 14636, 14638, 14639, 14640, 14642, 14646, 14659, 14661, 14663, 14665, 14667, 14670, 14672, 14673, 14677, 14680, 14685, 14689, 14702, 14710, 14734, 14739, 14754, 14771, 14776, 14782, 14793, 14798, 14815, 14816, 14836, 14846, 14852, 14858, 14864, 14866, 14876, 14878, 14895, 14898, 14901, 14917, 14951, 14971, 14972, 14988, 14990, 15020, 15029, 15053, 15071, 15081, 15082, 15085, 15094, 15107, 15109, 15121, 15131, 2757, 15144, 15145, 844, 15153, 15170, 15195, 15203, 15206, 15210, 15218, 15220, 15241, 15245, 15249, 15258, 15267, 15271, 15275, 15285, 15291, 15296, 15312, 15318, 553, 15324, 1559, 15338, 15342, 10341, 15356, 15386, 15402, 15427, 15446, 15457, 15476, 15477, 15483, 15509, 15522, 15524, 15525, 15547, 15552, 15559, 15562, 15568, 15573, 15580, 15581, 15582, 15585, 15588, 15611, 15626, 15632, 15656, 15658, 15662, 15665, 15678, 15680, 15683, 15687, 15705, 15707, 7293, 15742, 15743, 15793, 15828, 15853, 15859, 15866, 2353, 15892, 15897, 15905, 15910, 15913, 15914, 15920, 15923, 15938, 15950, 15952, 15958, 15973, 15979, 15984, 15986, 16000, 16014, 16034, 16035, 16045, 16047, 16050, 16059, 16099, 16103, 16107, 16123, 16129, 6889, 16156, 16178, 16191, 16203, 16210, 16213, 5753, 16262, 16264, 16265, 16287, 16300, 16307, 16310, 16323, 16325, 16354, 16355, 16357, 16360, 16365, 16386, 16389, 16402, 16407, 16418, 16420, 16430, 16432, 16466, 16471, 16479, 16480, 16496, 16533, 16570, 16587, 16589, 16603, 16609, 16615, 16628, 16634, 16658, 16664, 16669, 16685, 16695, 16711, 16727, 16735, 16738, 16741, 16743, 16745, 16764, 16772, 16800, 16806, 16813, 16826, 16855, 16872, 16888, 16896, 16903, 16913, 16925, 16949, 16950, 16964, 16973, 16975, 16984, 17005, 17035, 17040, 17042, 17048, 17051, 17059, 17066, 17070, 17088, 17097, 17101, 17116, 17134, 17136, 17137, 17142, 17158, 17160, 17171, 17176, 17187, 207, 17203, 17212, 17217, 17220, 17234, 17238, 17246, 17254, 17267, 17289, 17293, 17299, 17300, 17314, 17317, 17318, 17346, 17350, 17356, 17367, 17382, 17384, 2570, 17399, 17421, 17428, 17431, 17433, 8454, 17503, 17513, 17514, 17527, 17529, 17536, 17553, 17562, 17569, 17572, 17577, 17592, 17600, 1790, 17610, 17624, 17633, 17636, 17653, 17656, 17665, 17671, 17688, 17693, 17697, 17703, 17705, 17740, 17742, 17751, 17764, 7294, 17813, 17821, 17833, 17845, 17846, 17870, 17874, 17880, 17884, 17894, 17909, 17911, 17916, 17924, 17936, 17940, 17949, 17962, 17967, 17969, 17989, 18015, 18027, 18033, 18039, 18042, 18049, 18058, 18064, 18068, 18078, 18089, 18099, 18101, 18109, 18152, 18164, 18166, 18191, 18196, 18200, 18206, 18232, 18242, 18245, 18266, 18291, 18299, 717, 18316, 18322, 18333, 18339, 18352, 18359, 18362, 18403, 18441, 18463, 18473, 18478, 18496, 18499, 18508, 18512, 18515, 18523, 18524, 18527, 18544, 18547, 18548, 18560, 18569, 18581, 18586, 18597, 18621, 18628, 8731, 18636, 18647, 18666, 18699, 18718, 18721, 18747, 18762, 18767, 18786, 18813, 18814, 18836, 18841, 18843, 18860, 18861, 18866, 18867, 18868, 18875, 18878, 18890, 18898, 18907, 18913, 18915, 18927, 18928, 18948, 18949, 18955, 18974, 18987, 18997, 19022, 19028, 19031, 19046, 19047, 19081, 19092, 19093, 19105, 19136, 19141, 19143, 19146, 19157, 19162, 19172, 19198, 19220, 19248, 19257, 19264, 19275, 19278, 19293, 19296, 19305, 19328, 19339, 19346, 19361, 19386, 19390, 19399, 19404, 19435, 19443, 19445, 19466, 19491, 19518, 19520, 19527, 19553, 19583, 19589, 19593, 19602, 19634, 19642, 19645, 19652, 19691, 19693, 19697, 19711, 19722, 19748, 19756, 19757, 19769, 19788, 19797, 19814, 19819, 19848, 19849, 19851, 19861, 19868, 19880, 19884, 19892, 19904, 19912, 19920, 19925, 844, 19934, 19935, 19941, 19947, 19950, 19954, 19958, 19982, 19995, 20002, 20003, 20017, 20025, 20037, 20049, 20057, 20065, 20069, 20074, 20088, 20108, 20133, 20139, 20158, 20181, 20182, 20190, 20197, 20199, 20201, 20222, 20235, 20244, 20251, 20258, 20276, 20287, 20290, 20293, 20295, 20303, 20327, 20333, 20334, 20336, 20354, 20361, 20369, 20375, 20379, 20384, 20395, 20416, 20432, 20439, 20448, 20454, 20477, 20501, 20508, 20510, 20549, 20583, 20585, 20592, 20599, 20604, 20610, 20653, 20674, 20675, 20691, 20700, 20733, 20737, 20763, 20765, 20766, 20773, 20812, 20817, 20818, 20819, 20824, 20850, 20851, 20854, 20864, 20879, 10569, 20913, 20920, 20936, 20942, 20948, 20950, 20956, 20960, 20963, 20964, 20982, 20992, 21000, 21005, 21025, 21029, 21033, 21060, 21062, 21066, 21098, 21103, 21112, 21136, 21145, 21153, 21158, 21167, 21195, 21207, 21230, 21232, 21236, 21250, 21262, 9439, 21267, 21272, 21280, 21288, 21295, 21301, 21303, 21305, 21307, 21312, 21313, 21318, 21326, 21336, 21342, 21345, 21346, 21361, 21362, 21374, 21378, 21384, 21400, 21412, 21413, 21432, 21438, 21439, 218, 21448, 21449, 21470, 21476, 21488, 21492, 21509, 21515, 21535, 21545, 21551, 21557, 21573, 21578, 21586, 21593, 21600, 21603, 13539, 21624, 21653, 21662, 21689, 21701, 21713, 21743, 21744, 21750, 21756, 21758, 21778, 21784, 722, 21811, 21813, 21822, 21841, 21848, 21849, 21893, 21897, 21905, 21913, 21921, 21949, 21955, 21966, 21970, 21993, 21994, 21996, 22029, 22035, 22038, 22042, 22043, 356, 22073, 22080, 22085, 22090, 22107, 22110, 22115, 22119, 10569, 22143, 22153, 22213, 22217, 22218, 22241, 22247, 22249, 22252, 22255, 22270, 22275, 22277, 22279, 22293, 22310, 22318, 12774, 22326, 22345, 22358, 22360, 22366, 22382, 22384, 22385, 22391, 22396, 22397, 22401, 22422, 22426, 22427, 22443, 22466, 22472, 22493, 22499, 22504, 22513, 22522, 22552, 22558, 22561, 22589, 22592, 22594, 22598, 22609, 22610, 22625, 22633, 22637, 22641, 22644, 22676, 22683, 22697, 22702, 22704, 22706, 22708, 22730, 22734, 4070, 22743, 22759, 22777, 22778, 22780, 22781, 22789, 22790, 22796, 22813, 22817, 22818, 22833, 22834, 22835, 22840, 22847, 22851, 22853, 22864, 22868, 22890, 22896, 22904, 22912, 22915, 22936, 22945, 22946, 22951, 23004, 23006, 356, 23022, 23042, 23057, 23060, 23063, 23076, 23085, 23097, 23114, 23116, 23141, 4608, 23160, 23164, 23184, 23191, 23205, 23214, 23216, 23222, 23235, 23252, 23258, 23271, 23272, 23273, 23274, 23276, 23284, 23288, 23291, 23300, 23318, 23319, 23321, 23342, 23345, 23348, 23352, 23366, 23377, 23391, 23404, 23406, 23441, 23470, 23473, 23478, 23490, 23492, 23496, 23509, 23517, 23530, 23553, 23558, 23585, 23590, 23592, 23600, 23605, 23618, 23626, 23636, 23668, 23672, 23678, 23691, 23693, 23724, 23752, 23759, 23788, 23800, 23804, 23809, 23812, 23819, 23828, 23866, 23890, 23894, 23904, 23914, 23943, 23961, 23970, 23981, 23982, 23987, 24023, 24042, 24046, 7293, 24058, 24081, 24092, 24132, 24139, 24140, 24157, 24161, 24191, 24197, 24205, 24211, 24234, 24245, 24247, 24266, 24269, 24274, 24279, 24281, 24283, 24290, 24304, 24312, 24320, 24325, 24337, 218, 24366, 24371, 24396, 24403, 24432, 24433, 24435, 24444, 24452, 24456, 24461, 24476, 24478, 24517, 24526, 24533, 24540, 24545, 24558, 24562, 24565, 24568, 24572, 24576, 24597, 24603, 24605, 24616, 24651, 24669, 24717, 24722, 24730, 24734, 24762, 24765, 24784, 24785, 24803, 24805, 24807, 22468, 24820, 24821, 24832, 24836, 24851, 24863, 24866, 24885, 24888, 24897, 24900, 24902, 24911, 24912, 24922, 24924, 24925, 24932, 24935, 24938, 24948, 24950, 24985, 24994, 25060, 25062, 25065, 25068, 25070, 25074, 25087, 25099, 25101, 25124, 25140, 25141, 25151, 25153, 25165, 25176, 25181, 25209, 25214, 25222, 25231, 25242, 25269, 25284, 25290, 25307, 25312, 25318, 25335, 25344, 25374, 25378, 25392, 2364, 25402, 25428, 25439, 25455, 25474, 25493, 25495, 25496, 1143, 25514, 25551, 25552, 25555, 25561, 25583, 25592, 25602, 25609, 25622, 25634, 25648, 25654, 1559, 25684, 25693, 25728, 25735, 25741, 25752, 25766, 25773, 25793, 25800, 25805, 9165, 14720, 25843, 25851, 25852, 25882, 25885, 25902, 25929, 25950, 6809, 25962, 25984, 25993, 25998, 26003, 26017, 26019, 26021, 26028, 26042, 26056, 26059, 26076, 26087, 26090, 26115, 26120, 26126, 26127, 26129, 26130, 26137, 26140, 26144, 26146, 26168, 26172, 26203, 26240, 26242, 26243, 26285, 26312, 26316, 26320, 26326, 26337, 26341, 13653, 26352, 26356, 26362, 26376, 26377, 26382, 26385, 26386, 26396, 26406, 26416, 26420, 26423, 26449, 26476, 26479, 26483, 26489, 26491, 26493, 26496, 26516, 26529, 26557, 26561, 26573, 26575, 26577, 26592, 26611, 26623, 26625, 26647, 26649, 26651, 26654, 26668, 26674, 26676, 26687, 26700, 26713, 26770, 26775, 26790, 26795, 26803, 2414, 26821, 26829, 26831, 26843, 26844, 26845, 26847, 26852, 26858, 26862, 26868, 26869, 26872, 26890, 26909, 26938, 26941, 26942, 26988, 26991, 26995, 27039, 27041, 27045, 27053, 27054, 27058, 27059, 27066, 27070, 27073, 27085, 27091, 27137, 27146, 27151, 27152, 27173, 27197, 27199, 27222, 27223, 27226, 27245, 27249, 27255, 27281, 27319, 27341, 27345, 27352, 27356, 27371, 27402, 27413, 27424, 27452, 27458, 27471, 27483, 27503, 27519, 27528, 27532, 27564, 27588, 27603, 27606, 27610, 27619, 27621, 27632, 27634, 27650, 27652, 27660, 1790, 27669, 27672, 27677, 27678, 27679, 27697, 27701, 27710, 27723, 27735, 27746, 27747, 27757, 27775, 27778, 27780, 27787, 27797, 27811, 27816, 27822, 27827, 27840, 27857, 27864, 27880, 27899, 27922, 27924, 27925, 27939, 27940, 27960, 27990, 28009, 28029, 28031, 28049, 28059, 28078, 2479, 28084, 28107, 28109, 28110, 28120, 28127, 28136, 28155, 28157, 28159, 28160, 9166, 28174, 28178, 28184, 28196, 28198, 28216, 28224, 28229, 28237, 28242, 28248, 28252, 28267, 28275, 28280, 28291, 28306, 28310, 28327, 28329, 28352, 28357, 28358, 28360, 28364, 28369, 28382, 28391, 16658, 28399, 28402, 28425, 28454, 28462, 28469, 28483, 28506, 28508, 28509, 28520, 28530, 28543, 28557, 28562, 28564, 28586, 28593, 28597, 28607, 28616, 28631, 28634, 28635, 28670, 28672, 28677, 28683, 28716, 28736, 28743, 28761, 28763, 28767, 28778, 28794, 28814, 28825, 28837, 28841, 28849, 28858, 28860, 28861, 28915, 28936, 28943, 28945, 28959, 28972, 28977, 28980, 29002, 29014, 29017, 29020, 29029, 29034, 29038, 29053, 29057, 29063, 29064, 29071, 29084, 29094, 29109, 16411, 10569, 29114, 29128, 29129, 29134, 29143, 29173, 29184, 29197, 29203, 29223, 29249, 29253, 29257, 29280, 29320, 29362, 29379, 29386, 29389, 29421, 29424, 29427, 29430, 29435, 29445, 29451, 29470, 29482, 29490, 29494, 29497, 29531, 29533, 29541, 29553, 29557, 29565, 29568, 29593, 29601, 29607, 29611, 29623, 29624, 29640, 29641, 29679, 29681, 29699, 29712, 29715, 29719, 29722, 29728, 12347, 29745, 1790, 29774, 12205, 29786, 29791, 29794, 29797, 3535, 29805, 29826, 29834, 29860, 29874, 22612, 29896, 29923, 29928, 29930, 29932, 29941, 29954, 29973, 29983, 30002, 30003, 30010, 30017, 30024, 3875, 30034, 30038, 30052, 30060, 30066, 30071, 30082, 10628, 30095, 30115, 30123, 30130, 30151, 30161, 30170, 30172, 30184, 30207, 30208, 6953, 30221, 30223, 30229, 30237, 30240, 30243, 30244, 30271, 30289, 30299, 30308, 30327, 30332, 30342, 30353, 30356, 30378, 30386, 30393, 30408, 30409, 30417, 30421, 30430, 30433, 30436, 30462, 30478, 30480, 30490, 30491, 30496, 30507, 30523, 30532, 30543, 30544, 30546, 30560, 30580, 30590, 30606, 30610, 30627, 30646, 30647, 30658, 30659, 30710, 30723, 30729, 30739, 30743, 30746, 30759, 30763, 30764, 30770, 30771, 30773, 30798, 30803, 30836, 30837, 30840, 30844, 30845, 30867, 30874, 30877, 30880, 30881, 30882, 30891, 30901, 30905, 30915, 30934, 30952, 30954, 30957, 30960, 30966, 30967, 30971, 30985, 31009, 31019, 31033, 31034, 4070, 31047, 31054, 218, 31092, 31101, 31112, 31124, 31138, 31139, 31144, 31150, 31152, 31169, 31171, 31179, 31188, 31190, 31202, 31205, 31207, 31233, 31252, 31254, 31262, 31274, 31275, 31276, 31286, 31293, 31297, 31307, 31316, 31340, 31341, 31352, 31372, 31382, 31386, 31409, 31418, 31419, 31424, 31431, 31451, 31463, 31465, 31470, 31479, 31480, 31482, 31497, 31514, 31524, 31542, 31557, 31574, 31580, 31590, 31592, 31595, 31598, 31623, 31624, 31642, 31644, 31645, 31659, 31660, 31663, 31680, 31687, 31697, 31698, 31702, 31703, 7293, 31732, 31739, 31746, 31752, 31757, 31760, 31770, 31784, 31790, 31821, 31822, 31848, 31861, 31882, 31884, 31888, 31891, 31901, 31908, 31915, 31916, 31922, 31948, 31950, 31958, 31959, 31966, 31983, 32000, 32009, 32017, 32025, 32034, 32056, 32057, 32070, 32089, 32091, 32095, 32102, 32127, 32130, 32133, 32152, 32160, 32161, 32170, 32184, 32189, 32202, 32212, 32215, 32217, 32220, 32225, 32251, 32254, 32258, 32266, 32278, 2353, 32344, 32365, 32375, 32379, 32384, 32386, 32387, 32426, 32438, 32440, 32453, 32458, 32464, 32468, 32478, 844, 32526, 13244, 32570, 4230, 32591, 32623, 32642, 32667, 32680, 32703, 32719, 32720, 32761, 32766, 32771, 32786, 32809, 207, 32839, 32842, 32859, 32863, 32865, 32876, 32886, 32913, 22468, 32920, 32927, 32956, 32961, 32980, 32989, 33006, 33034, 33035, 33043, 33068, 33073, 33089, 33094, 33109, 33130, 33136, 33152, 33171, 33172, 33192, 33198, 33218, 21813, 33231, 33238, 33245, 33261, 33283, 33294, 33299, 33310, 33314, 33318, 33331, 33336, 33337, 33338, 33343, 33344, 33352, 33354, 33388, 33389, 33392, 33398, 33403, 33411, 33412, 33413, 13799, 33422, 33442, 33443, 33448, 33460, 33468, 33472, 33483, 33493, 33499, 33516, 33518, 33532, 33534, 33548, 33558, 33565, 33583, 33588, 33589, 33599, 33601, 33610, 33620, 33638, 2644, 33661, 33702, 33705, 33717, 33726, 33731, 33756, 33768, 33796, 33801, 33812, 33821, 33860, 33862, 33883, 33891, 33896, 33897, 33912, 33937, 33940, 33944, 33946, 8728, 33953, 33972, 33979, 33982, 33987, 33991, 33997, 34010, 34016, 1396, 34040, 34044, 34045, 34052, 34058, 34060, 34065, 34067, 34079, 3875, 34097, 34098, 34120, 34126, 34145, 34150, 34152, 34170, 34175, 34177, 34185, 34205, 34207, 34208, 34218, 34242, 34264, 34290, 34297, 34299, 34301]


def standardize_tokenization(sentence_tokens, token_labels):
    # In the raw data, there is inconsistency with "n't" contractions. Fix those here:
    # Should always be, for example:
    # did n't (NOT didn't)
    # can n't (NOT can't)
    # Note that this must be called after processing the M2 files to avoid breaking the correspondence to the
    # annotation indexes.
    neg_suffix = "n't"
    filtered_tokens = []
    filtered_token_labels = []

    for token, label in zip(sentence_tokens, token_labels):
        added_token = False
        if token.endswith(neg_suffix):
            if token != neg_suffix:  # need to tokenize
                prev_token = token[:-len(neg_suffix)]
                filtered_tokens.append(prev_token)
                filtered_tokens.append(neg_suffix)
                filtered_token_labels.append(label)
                filtered_token_labels.append(label)
                added_token = True

        if not added_token:
            filtered_tokens.append(token)
            filtered_token_labels.append(label)
    return filtered_tokens, filtered_token_labels


def get_lines(filepath_with_name, tokenizer):

    formatted_label_lines = []
    formatted_lines = []

    number_of_ins = 0
    number_of_del = 0
    number_of_rep = 0
    number_of_unk_insertions = 0
    number_of_end_of_sentence_insertions = 0
    number_of_negations_standardized = 0
    total_tokens = 0

    number_of_class0 = 0
    number_of_class1 = 0
    text_lens = []

    current_line = []
    current_labels = []

    line_id = 0
    with codecs.open(filepath_with_name, encoding="utf-8") as f:
        for line in f:
            # if line_id % 10000 == 0:
            #     print(f"Currently processing {filepath_with_name} line: {line_id}")
            line_id += 1
            split_line = line.strip().split()
            if len(split_line) != 0:
                line_type = split_line[0]
                assert line_type in ["S", "A"]
                if line_type == "S":
                    assert current_line == [] and current_labels == []
                    current_line = split_line[1:]
                    current_labels = [0 for x in range(len(current_line))]
                elif line_type == "A":
                    assert current_line != [] and current_labels != []
                    split_annotation = line.strip().split("|||")
                    string_indexes = split_annotation[0][1:].split()
                    assert len(string_indexes) == 2
                    index1 = int(string_indexes[0])
                    index2 = int(string_indexes[1])
                    new_text = split_annotation[2]
                    assert int(split_annotation[5]) == 0, f"ERROR: Currently only assuming 1 annotator."
                    if index1 == -1:  # noop: annotator indicates no changes are needed
                        assert index2 == -1
                        assert new_text == "-NONE-"
                    else:
                        if index1 == index2:  # insertion
                            if new_text == "":
                                # print(f"WARNING: Unexpected input (insertion of empty text):"
                                #       f"\n\t{' '.join(current_line)}\n\t{line}")
                                assert split_annotation[1] == "UNK"
                                number_of_unk_insertions += 1
                            # insertions are marked as 1 in the immediately following token;
                            # insertions at the end of the line are marked at the final token of the sentence
                            # rather than adding a holder symbol
                            if index1 == len(current_labels):
                                # print(f"WARNING: The insertion is at the end of the sentence:"
                                #       f"\n\t{' '.join(current_line)}\n\t{line}")
                                number_of_end_of_sentence_insertions += 1
                                index1 = len(current_labels)-1
                            elif index1 > len(current_labels):
                                assert False, f"ERROR: insertion index exceeds the sentence length."
                            current_labels[index1] = 1

                            number_of_ins += 1
                        else:
                            # deletions and replacements similarly have a 1 label for all deleted source tokens
                            for i in range(index1, index2):
                                current_labels[i] = 1
                            if new_text == "":
                                number_of_del += 1
                            else:
                                number_of_rep += 1
            else:
                assert len(current_line) == len(current_labels) and len(current_line) != 0

                class_label = 0 if sum(current_labels) == 0 else 1
                if class_label == 0:
                    number_of_class0 += 1
                else:
                    number_of_class1 += 1

                tokens, seq_labels = filter_with_bert_tokenizer(tokenizer, current_line, current_labels)
                if len(tokens) != len(current_line):
                    print(f"WARNING: An unexpected character was seen by the BERT tokenizer, so dropping:"
                          f"\n\tORIGINAL: {' '.join(current_line)}"
                          f"\n\tCLEANED: {' '.join(tokens)}"
                          f"\n\tCLEANED: {' '.join([str(x) for x in seq_labels])}")
                    print(f"\tManually fixing labels:")
                    assert ' '.join(tokens) == "Hope this message finds you in good health"
                    seq_labels[-1] = 1
                    number_of_end_of_sentence_insertions += 1
                    print(f"\tFIXED: {' '.join([str(x) for x in seq_labels])}")

                filtered_tokens, filtered_token_labels = standardize_tokenization(tokens, seq_labels)
                if filtered_tokens != tokens:
                    # print(f"WARNING: Fixed negation contraction tokenization:"
                    #       f"\n\tORIGINAL: {' '.join(tokens)}"
                    #       f"\n\tCLEANED: {' '.join(filtered_tokens)}"
                    #       f"\n\tCLEANED: {' '.join([str(x) for x in filtered_token_labels])}")
                    number_of_negations_standardized += 1
                total_tokens += len(filtered_tokens)
                text_lens.append(len(filtered_tokens))
                formatted_lines.append(f"{class_label} {' '.join(filtered_tokens)}\n")
                formatted_label_lines.append(f"{' '.join([str(x) for x in filtered_token_labels])}\n")

                current_line = []
                current_labels = []

    assert len(current_line) == len(current_labels) and len(current_line) == 0
    print(f"Class 0 count: {number_of_class0}; Class 1 count: {number_of_class1}")
    print(f"Mean length: {np.mean(text_lens)}; std: {np.std(text_lens)};"
          f" min: {np.min(text_lens)}, max: {np.max(text_lens)}")
    print(f"Number of insertions: {number_of_ins}")
    print(f"\tNumber of insertions of UNK type: {number_of_unk_insertions}")
    print(f"\tNumber of insertions at the end of the sentence: {number_of_end_of_sentence_insertions}")
    print(f"Number of deletions: {number_of_del}")
    print(f"Number of replacements: {number_of_rep}")
    print(f"Number of negations standardized: {number_of_negations_standardized}")

    print(f"Total tokens: {total_tokens}")

    return formatted_lines, formatted_label_lines


def filter_with_bert_tokenizer(tokenizer, sentence_tokens, token_labels):
    assert len(sentence_tokens) == len(token_labels)
    filtered_tokens = []
    filtered_token_labels = []

    for token, label in zip(sentence_tokens, token_labels):
        bert_tokens = tokenizer.tokenize(token)
        if len(bert_tokens) == 0:  # must be a special character filtered by BERT
            #assert False
            #pass
            print(f"Ignoring {token} with label {label}")
            #assert False
        else:
            filtered_tokens.append(token)
            filtered_token_labels.append(label)

    assert len(filtered_tokens) == len(filtered_token_labels)
    return filtered_tokens, filtered_token_labels


def split_train(formatted_lines, formatted_label_lines):
    assert len(formatted_lines) == len(formatted_label_lines)
    formatted_lines_train = []
    formatted_label_lines_train = []
    formatted_lines_dev = []
    formatted_label_lines_dev = []
    for i in range(len(formatted_lines)):
        if i in dev_indices_train_ABC:
            formatted_lines_dev.append(formatted_lines[i])
            formatted_label_lines_dev.append(formatted_label_lines[i])
        else:
            formatted_lines_train.append(formatted_lines[i])
            formatted_label_lines_train.append(formatted_label_lines[i])
    return formatted_lines_train, formatted_label_lines_train, formatted_lines_dev, formatted_label_lines_dev


def save_lines(filename_with_path, list_of_strings_with_newlines):
    with codecs.open(filename_with_path, "w", encoding="utf-8") as f:
        f.writelines(list_of_strings_with_newlines)


def main(arguments):

    parser = argparse.ArgumentParser(description=__doc__,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('--input_train_file', type=str, help="input_train_file")
    parser.add_argument('--input_test_file', type=str, help="input_test_file")
    parser.add_argument('--output_binaryevalformat_train_file', type=str,
                        help="output_binaryevalformat_train_file")
    parser.add_argument('--output_binaryevalformat_train_labels_file', type=str,
                        help="output_binaryevalformat_train_labels_file")
    parser.add_argument('--output_binaryevalformat_dev_file', type=str,
                        help="output_binaryevalformat_dev_file")
    parser.add_argument('--output_binaryevalformat_dev_labels_file', type=str,
                        help="output_binaryevalformat_dev_labels_file")
    parser.add_argument('--output_binaryevalformat_test_file', type=str,
                        help="output_binaryevalformat_test_file")
    parser.add_argument('--output_binaryevalformat_test_labels_file', type=str,
                        help="output_binaryevalformat_test_labels_file")

    # for BERT tokenizer:
    parser.add_argument("--bert_cache_dir", default="", type=str)
    parser.add_argument("--bert_model", default="", type=str,
                        help="Bert pre-trained model selected in the list: bert-base-uncased, "
                             "bert-large-uncased, bert-base-cased, bert-base-multilingual, bert-base-chinese.")
    parser.add_argument("--do_lower_case", action='store_true', help="Set this flag if you are using an uncased model.")

    args = parser.parse_args(arguments)

    tokenizer = BertTokenizer.from_pretrained(args.bert_model, do_lower_case=args.do_lower_case,
                                              cache_dir=args.bert_cache_dir)
    output_lines, output_labels_lines = get_lines(args.input_train_file, tokenizer)
    assert len(output_lines) == len(output_labels_lines)
    print(f"Length of full training output: {len(output_lines)}")

    print(f"Splitting train to create held-out dev")
    output_lines_train, output_labels_lines_train, output_lines_dev, output_labels_lines_dev = \
        split_train(output_lines, output_labels_lines)
    print(f"Length of training split: {len(output_lines_train)}")
    print(f"Length of dev split: {len(output_lines_dev)}")

    output_lines_test, output_labels_lines_test = get_lines(args.input_test_file, tokenizer)

    save_lines(args.output_binaryevalformat_train_file, output_lines_train)
    save_lines(args.output_binaryevalformat_train_labels_file, output_labels_lines_train)

    save_lines(args.output_binaryevalformat_dev_file, output_lines_dev)
    save_lines(args.output_binaryevalformat_dev_labels_file, output_labels_lines_dev)

    save_lines(args.output_binaryevalformat_test_file, output_lines_test)
    save_lines(args.output_binaryevalformat_test_labels_file, output_labels_lines_test)


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))

